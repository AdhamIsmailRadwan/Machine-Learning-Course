{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57f1614d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A  B    C    D  E  F    G  H    I  J  K  L  Target\n",
      "63  1  3  145  233  1  0  150  0  2.3  0  0  1       1\n",
      "37  1  2  130  250  0  1  187  0  3.5  0  0  2       1\n",
      "41  0  1  130  204  0  0  172  0  1.4  2  0  2       1\n",
      "56  1  1  120  236  0  1  178  0  0.8  2  0  2       1\n",
      "57  0  0  120  354  0  1  163  1  0.6  2  0  2       1\n",
      "57  1  0  140  192  0  1  148  0  0.4  1  0  1       1\n",
      "56  0  1  140  294  0  0  153  0  1.3  1  0  2       1\n",
      "44  1  1  120  263  0  1  173  0  0.0  2  0  3       1\n",
      "52  1  2  172  199  1  1  162  0  0.5  2  0  3       1\n",
      "57  1  2  150  168  0  1  174  0  1.6  2  0  2       1\n",
      "54  1  0  140  239  0  1  160  0  1.2  2  0  2       1\n",
      "48  0  2  130  275  0  1  139  0  0.2  2  0  2       1\n",
      "49  1  1  130  266  0  1  171  0  0.6  2  0  2       1\n",
      "64  1  3  110  211  0  0  144  1  1.8  1  0  2       1\n",
      "58  0  3  150  283  1  0  162  0  1.0  2  0  2       1\n",
      "50  0  2  120  219  0  1  158  0  1.6  1  0  2       1\n",
      "58  0  2  120  340  0  1  172  0  0.0  2  0  2       1\n",
      "66  0  3  150  226  0  1  114  0  2.6  0  0  2       1\n",
      "43  1  0  150  247  0  1  171  0  1.5  2  0  2       1\n",
      "69  0  3  140  239  0  1  151  0  1.8  2  2  2       1\n",
      ".........................................................................\n",
      "                A           B           C           D           E           F  \\\n",
      "count  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \n",
      "mean     0.683168    0.966997  131.623762  246.264026    0.148515    0.528053   \n",
      "std      0.466011    1.032052   17.538143   51.830751    0.356198    0.525860   \n",
      "min      0.000000    0.000000   94.000000  126.000000    0.000000    0.000000   \n",
      "25%      0.000000    0.000000  120.000000  211.000000    0.000000    0.000000   \n",
      "50%      1.000000    1.000000  130.000000  240.000000    0.000000    1.000000   \n",
      "75%      1.000000    2.000000  140.000000  274.500000    0.000000    1.000000   \n",
      "max      1.000000    3.000000  200.000000  564.000000    1.000000    2.000000   \n",
      "\n",
      "                G           H           I           J           K           L  \\\n",
      "count  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \n",
      "mean   149.646865    0.326733    1.039604    1.399340    0.729373    2.313531   \n",
      "std     22.905161    0.469794    1.161075    0.616226    1.022606    0.612277   \n",
      "min     71.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
      "25%    133.500000    0.000000    0.000000    1.000000    0.000000    2.000000   \n",
      "50%    153.000000    0.000000    0.800000    1.000000    0.000000    2.000000   \n",
      "75%    166.000000    1.000000    1.600000    2.000000    1.000000    3.000000   \n",
      "max    202.000000    1.000000    6.200000    2.000000    4.000000    3.000000   \n",
      "\n",
      "           Target  \n",
      "count  303.000000  \n",
      "mean     0.544554  \n",
      "std      0.498835  \n",
      "min      0.000000  \n",
      "25%      0.000000  \n",
      "50%      1.000000  \n",
      "75%      1.000000  \n",
      "max      1.000000  \n",
      ".........................................................................\n",
      "Cancer data= \n",
      "    A  B    C    D  E  F    G  H    I  J  K  L  Target\n",
      "63  1  3  145  233  1  0  150  0  2.3  0  0  1       1\n",
      "37  1  2  130  250  0  1  187  0  3.5  0  0  2       1\n",
      "41  0  1  130  204  0  0  172  0  1.4  2  0  2       1\n",
      "56  1  1  120  236  0  1  178  0  0.8  2  0  2       1\n",
      "57  0  0  120  354  0  1  163  1  0.6  2  0  2       1\n",
      ".. .. ..  ...  ... .. ..  ... ..  ... .. .. ..     ...\n",
      "56  1  1  120  240  0  1  169  0  0.0  0  0  2       1\n",
      "55  0  1  132  342  0  1  166  0  1.2  2  0  2       1\n",
      "41  1  1  120  157  0  1  182  0  0.0  2  0  2       1\n",
      "38  1  2  138  175  0  1  173  0  0.0  2  4  2       1\n",
      "38  1  2  138  175  0  1  173  0  0.0  2  4  2       1\n",
      "\n",
      "[165 rows x 13 columns]\n",
      ".........................................................................\n",
      "Not Cancer data= \n",
      "    A  B    C    D  E  F    G  H    I  J  K  L  Target\n",
      "67  1  0  160  286  0  0  108  1  1.5  1  3  2       0\n",
      "67  1  0  120  229  0  0  129  1  2.6  1  2  3       0\n",
      "62  0  0  140  268  0  0  160  0  3.6  0  2  2       0\n",
      "63  1  0  130  254  0  0  147  0  1.4  1  1  3       0\n",
      "53  1  0  140  203  1  0  155  1  3.1  0  0  3       0\n",
      ".. .. ..  ...  ... .. ..  ... ..  ... .. .. ..     ...\n",
      "57  0  0  140  241  0  1  123  1  0.2  1  0  3       0\n",
      "45  1  3  110  264  0  1  132  0  1.2  1  0  3       0\n",
      "68  1  0  144  193  1  1  141  0  3.4  1  2  3       0\n",
      "57  1  0  130  131  0  1  115  1  1.2  1  1  3       0\n",
      "57  0  1  130  236  0  0  174  0  0.0  1  1  2       0\n",
      "\n",
      "[138 rows x 13 columns]\n"
     ]
    }
   ],
   "source": [
    "import numpy as math\n",
    "import pandas as fi\n",
    "\n",
    "location = r'/Users/adhamismail/Downloads/Machen learing/Data/Data Week 2/heart cancer.txt'\n",
    "# Q2) Read and Named columns 1 to 13\n",
    "data = fi.read_csv(location, header=None, names = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"Target\"])\n",
    "# Q3) Print first 20 rows and print description\n",
    "First_20_rows= data.head(20)\n",
    "description = data.describe()\n",
    "print(First_20_rows)\n",
    "print(\".........................................................................\")\n",
    "print(description)\n",
    "print(\".........................................................................\")\n",
    "# Q4) rarrange data named(cancer, not cancer)\n",
    "Cancer = data[data[\"Target\"].isin([1])]\n",
    "Not_Cancer = data[data[\"Target\"].isin([0])]\n",
    "# Q5) print shape of Q4\n",
    "print(\"Cancer data= \")\n",
    "print(Cancer)\n",
    "print(\".........................................................................\")\n",
    "print(\"Not Cancer data= \")\n",
    "print(Not_Cancer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f4e3c9e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
